#include <iostream>
#include <iomanip>
#include <cctype>
#include <cmath>
#include <cstring>
#include "myint.h"

using namespace std;

int C2I(char c)
// converts character into integer (returns -1 for error)
{
   if (c < '0' || c > '9')	return -1;	// error
   return (c - '0');				// success
}

char I2C(int x)
// converts single digit integer into character (returns '\0' for error)
{
   if (x < 0 || x > 9)		return '\0';	// error
   return (static_cast<char>(x) + '0'); 	// success
}

// Add in operator overload and member function definitions 

MyInt::MyInt(int n)
{
  if(n <= 0)
  {
    size_ = 1;
    maxsize_ = 5;
    digits_ = new unsigned int[maxsize_];
    digits_[0] = 0;
  }
  else
  {
    size_ = log10(n) + 1;
    maxsize_ = size_ + 5;
    digits_ = new unsigned int[maxsize_];
    int temp = size_ - 1;
    int j = 10;
    for(int i=0; i < size_; i++)
    {
      int p = pow(10, temp);
      digits_[i] = n / p;
      n %= p;
      temp--;
    }
  }
}
MyInt::~MyInt()
{
  delete [] digits_;
}
MyInt::MyInt(const char * c)
{
  if(c == '\0')
  {
    size_ = 0;
    maxsize_ = 5;
    digits_ = new unsigned int[maxsize_];
  }
  else
  {
    for(int i = 0; i < strlen(c); i++)
    {
      if(IsNumber(c[i])==false)
      {
        size_ = 0;
        maxsize_ = 5;
        digits_ = new unsigned int[maxsize_];
      }
      else
        size_ = strlen(c);
    }
  maxsize_ = size_ + 5;
  digits_ = new unsigned int[maxsize_];
  for(int i =0; i < size_; i++)
    digits_[i] = C2I(c[i]);
  }
}
MyInt::MyInt(const MyInt& m)
{
  maxsize_ = m.maxsize_;
  size_ = m.size_;
  digits_ = new unsigned int[maxsize_];
  for(int i=0; i<size_; i++)
    digits_[i] = m.digits_[i];
}
MyInt& MyInt::operator= (const MyInt & m)
{
  if(this != &m)
  {
    delete [] digits_;
    maxsize_ = m.maxsize_;
    size_ = m.size_;
    digits_ = new unsigned int[maxsize_];
    for(int i=0; i < size_; i++)
      digits_[i] = m.digits_[i];
  }
  return *this;
}
bool MyInt::IsNumber(char x)
{
  if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9')
    return true;
  else
    return false;
}
int MyInt::GetSize()
{
  return size_;
}
void MyInt::Set(const char * x, MyInt y)
{
  for(int i=0; i < y.size_; i++)
    y.digits_[i] = 0;

  for(int i=0; i < strlen(x); i++)
  {
    if(y.IsNumber(x[i])==true)
    {
      y.digits_[i] = C2I(x[i]);
      y.size_++;
      if(y.size_==y.maxsize_)
        y.Grow();
    }
  }
}
void MyInt::Grow()
{
  maxsize_ = size_ + 5;
  unsigned int* newdigits = new unsigned int[maxsize_];
  for(int i=0; i < size_; i++)
    newdigits[i] = digits_[i];
  delete digits_;
  digits_ = newdigits;
}
istream& operator>> (istream & s, MyInt & x)
{
  char * input = '\0';
  s >> input;
  x.Set(input, x);
  return s;
}
ostream& operator<< (ostream & s, const MyInt & x)
{
  for(int i = 0; i < x.size_; i++)
    s << x.digits_[i];
  return s;
}
bool operator>(const MyInt & x, const MyInt & y)
{
  if(x.size_ > y.size_)
    return true;
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] > y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
bool operator<(const MyInt & x, const MyInt & y)
{
   if(x.size_ < y.size_)
    return true;
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] < y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
bool operator>=(const MyInt & x, const MyInt & y)
{
 if(x.size_ > y.size_)
    return true;
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] >= y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
bool operator<=(const MyInt & x, const MyInt & y)
{
  if(x.size_ < y.size_)
    return true;
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] <= y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
bool operator!=(const MyInt & x, const MyInt & y)
{
  if(x.size_ != y.size_)
    return true;
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] != y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
bool operator==(const MyInt & x, const MyInt & y)
{
  if(x.size_ == y.size_)
  {
    for(int i=0; i < x.size_; i++)
    {
      if(x.digits_[i] == y.digits_[i])
        return true;
    }
  }
  else
    return false;
}
void MyInt::Reverse()
{
 int s;
  for(int i = 0; i < size_/2; ++i)
  {
    s = digits_[size_-i-1];
    digits_[size_-i-1] = digits_[i];
    digits_[i] = s;
  }
}
MyInt operator+ (const MyInt & x, const MyInt & y)
{
  MyInt z;
  int size1 = x.size_ - 1;
  int size2 = y.size_ - 1;
  int i = 0;
  int carry = 0, temp;
  while(size1 >= 0 || size2 >= 0)
  {
    int a = x.digits_[size1];
    int b = y.digits_[size2];
    if(size1 < 0)
    a = 0;
    if(size2 < 0)
    b = 0;
    temp = a + b + carry;
    carry = 0;
    if(temp > 9)
    {
      temp %= 10;
      z.digits_[i] = temp;
      carry++;
    }
    else
    {
      z.digits_[i] = temp;
    }
    i++;
    size1--;
    size2--;
    z.size_ = i;
    if(z.size_ == z.maxsize_)
      z.Grow();
  }
  int s;
  z.Reverse();
  return z;
}
MyInt operator* (const MyInt & x, const MyInt & y)
{
  MyInt z;
  MyInt p[smallest]
  return z;
}

